#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  #+quicklisp (ql:quickload '(:parenscript) :silent t))

(defpackage :ros.script.build.ros.3681944456
  (:use :cl :parenscript))
(in-package :ros.script.build.ros.3681944456)

;;; Move macros to their own file
(defpsmacro when-let (bindings &body forms)
    "Creates new variable bindings, and conditionally executes FORMS.

BINDINGS must be either single binding of the form:

 (variable initial-form)

or a list of bindings of the form:

 ((variable-1 initial-form-1)
  (variable-2 initial-form-2)
  ...
  (variable-n initial-form-n))

All initial-forms are executed sequentially in the specified order. Then all
the variables are bound to the corresponding values.

If all variables were bound to true values, then FORMS are executed as an
implicit PROGN."
  (let* ((binding-list (if (and (consp bindings) (symbolp (car bindings)))
                           (list bindings)
                           bindings))
         (variables (mapcar #'car binding-list)))
    `(let ,binding-list
       (when (and ,@variables)
         ,@forms))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (setf *js-target-version* "6")
  (let ((files (directory "src/*.lisp")))
    (loop for file in files
          as output-file = (make-pathname :directory '(:relative "dist") :name (pathname-name file) :type "js") do
            (with-open-file (file-stream output-file :direction :output :if-exists :supersede :if-does-not-exist :create)
              (let ((*PARENSCRIPT-STREAM* file-stream))
                (ps-compile-file file))))))
;;; vim: set ft=lisp lisp:
